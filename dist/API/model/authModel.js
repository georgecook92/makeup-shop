"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,n){for(var o=0;o<n.length;o++){var t=n[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,o,t){return o&&e(n.prototype,o),t&&e(n,t),n}}(),_email=require("../email/email.js"),_email2=_interopRequireDefault(_email),bcrypt=require("bcrypt"),pool=require("../../../db/connect.js"),saltRounds=10,randomstring=require("randomstring"),AuthModel=function(){function e(n,o,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";_classCallCheck(this,e),this.sql=r,this.data=n,this.res=o,this.next=t}return _createClass(e,[{key:"forgotPasswordSetup",value:function(){var e=this;pool.getConnection().then(function(n){var o=randomstring.generate({length:20,charset:"hex"});return n.query(e.sql,[o,e.data.email]).then(function(t){if(!(t.changedRows>0))throw n.connection.release(),new Error("User Does Not Exist");n.connection.release();var r="www.testsite.com",s="You are receiving this because you have requested to reset your password. Please click on the following link, or paste this into your browser to completethe process:\n\n"+r+"/resetForgottenPassword/"+o+"\n\n After confirming your password you will be able to login.\n",a=new _email2.default(e.data.email,"forgotten-password@makeup.com","Forgotten Password",s,e.res);a.sendTokenEmail()}).catch(function(n){n&&(console.log(n),e.next(n))})})}},{key:"changePassword",value:function(){var e=this;pool.getConnection().then(function(n){try{bcrypt.genSalt(saltRounds,function(o,t){if(o)throw new Error(o);bcrypt.hash(e.data.password,t,function(o,t){if(o)throw new Error(o);return e.data.password=t,n.query(e.sql,[e.data.password,e.data.user_id]).then(function(o){if(console.log(o),!(o.changedRows>0))throw n.connection.release(),new Error("User Does Not Exist");n.connection.release(),e.res.status(200).json({success:!0})})})})}catch(n){console.log(n),e.next(n)}}).catch(function(n){console.log(n),e.next(n)})}},{key:"confirmUser",value:function(){var e=this;pool.getConnection().then(function(n){return n.query(e.sql,[e.data.token]).then(function(o){if(console.log("result",o),!(o.changedRows>0))throw n.connection.release(),new Error("User Does Not Exist");n.connection.release(),e.res.status(200).json({success:!0})})}).catch(function(n){console.log(n),e.next(n)})}},{key:"register",value:function(){var e=this,n=this.data,o=n.email,t=n.password,r=n.first_name,s=n.last_name,a=n.phone,i={email:o,password:t,first_name:r,last_name:s,phone:a},c=randomstring.generate({length:20,charset:"hex"});i.token=c;try{if(!(o&&t&&r&&s&&a))throw console.log("error - not all fields"),new Error("Provide All Fields");pool.getConnection().then(function(n){return n.query(e.sql,[e.data.email]).then(function(o){if(o.length>0)throw n.connection.release(),new Error("Exists");try{bcrypt.genSalt(saltRounds,function(o,t){if(o)throw n.connection.release(),new Error(o);bcrypt.hash(e.data.password,t,function(o,t){if(o)throw n.connection.release(),new Error(o);return i.password=t,pool.getConnection().then(function(n){return n.query("INSERT INTO _users SET ?",i).then(function(o){var t="www.testsite.com",r="You are receiving this because you (or someone else) have signed up to the website.\n\n Please click on the following link, or paste this into your browser to completethe process:\n\n"+t+"/confirmEmail/"+i.token+"\n\n Once you have confirmed your account, you will be able to login.\n",s=new _email2.default(e.data.email,"userconfirmation@makeup.com","Confirm Account",r,e.res);s.sendTokenEmail(),n.connection.release()})})})})}catch(n){console.log(n),e.next(n)}})}).catch(function(n){console.log(n),e.next(n)})}catch(e){console.log(e),this.next(e)}}},{key:"login",value:function(){var e=this;pool.getConnection().then(function(n){return n.query(e.sql,[e.data.email]).then(function(o){o.length>0&&bcrypt.compare(e.data.password,o[0].password,function(t,r){try{if(t)throw n.connection.release(),console.log(t),new Error(t);if(!r)throw n.connection.release(),new Error("Incorrect Password");n.connection.release(),console.log(o[0]),e.res.status(200).json({user_id:o[0].user_id,email:o[0].email,first_name:o[0].first_name,last_name:o[0].last_name,phone:o[0].phone})}catch(n){console.log(n),e.next(n)}})}).catch(function(n){console.log(n),e.next(n)})})}}]),e}();exports.default=AuthModel;
//# sourceMappingURL=data:application/json;base64,
