"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _asyncToGenerator(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){function r(s,a){try{var o=t[s](a),i=o.value}catch(e){return void n(e)}return o.done?void e(i):Promise.resolve(i).then(function(e){r("next",e)},function(e){r("throw",e)})}return r("next")})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_email=require("../email/email.js"),_email2=_interopRequireDefault(_email),bcrypt=require("bcrypt"),pool=require("../db/connect.js"),saltRounds=10,randomstring=require("randomstring"),jwt=require("jsonwebtoken"),secret=require("../jwtSecret.js"),AuthModel=function(){function e(t,n,r,s){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"";_classCallCheck(this,e),this.token=t,this.sql=a,this.data=n,this.res=r,this.next=s,this.secondSQL=o}return _createClass(e,[{key:"hashPassword",value:function(e){return new Promise(function(t,n){bcrypt.genSalt(saltRounds,function(r,s){r&&n(r),bcrypt.hash(e,s,function(e,r){e&&n(e),t(r)})})})}},{key:"comparePassword",value:function(e,t){return new Promise(function(n,r){bcrypt.compare(e,t,function(e,t){e&&r(e),n(t)})})}},{key:"forgotPasswordSetup",value:function(){function e(){return t.apply(this,arguments)}var t=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t,n,r,s,a,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pool.getConnection();case 3:return t=e.sent,n=randomstring.generate({length:20,charset:"hex"}),e.next=7,t.query(this.sql,[n,this.data.email]);case 7:if(r=e.sent,!(r.changedRows>0)){e.next=19;break}return t.connection.release(),s="www.testsite.com",a="You are receiving this because you have requested to reset your password. Please click on the following link, or paste this into your browser to completethe process:\n\n"+s+"/resetForgottenPassword/"+n+"\n\n After confirming your password you will be able to login.\n",o=new _email2.default(this.data.email,"forgotten-password@makeup.com","Forgotten Password",a,this.res),e.next=15,o.sendTokenEmail();case 15:i=e.sent,i&&this.res.json({success:"Email has been sent"}),e.next=21;break;case 19:throw t.connection.release(),new Error("User Does Not Exist");case 21:e.next=27;break;case 23:e.prev=23,e.t0=e.catch(0),console.log(e.t0),this.next(e.t0);case 27:case"end":return e.stop()}},e,this,[[0,23]])}));return e}()},{key:"changePassword",value:function(){function e(e){return t.apply(this,arguments)}var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var n,r,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,this.hashPassword(this.data.password);case 3:return n=e.sent,e.next=6,pool.getConnection();case 6:return r=e.sent,e.next=9,r.query(this.sql,[n,t]);case 9:if(s=e.sent,!(s.changedRows>0)){e.next=28;break}if("string"!=typeof t){e.next=24;break}return e.next=14,r.query(this.secondSQL,[t]);case 14:if(a=e.sent,!(a.changedRows>0)){e.next=20;break}r.connection.release(),this.res.status(200).json({success:!0}),e.next=22;break;case 20:throw r.connection.release(),new Error("User Does Not Exist");case 22:e.next=26;break;case 24:r.connection.release(),this.res.status(200).json({success:!0});case 26:e.next=30;break;case 28:throw r.connection.release(),new Error("User Does Not Exist");case 30:e.next=36;break;case 32:e.prev=32,e.t0=e.catch(0),console.log(e.t0),this.next(e.t0);case 36:case"end":return e.stop()}},e,this,[[0,32]])}));return e}()},{key:"confirmUser",value:function(){function e(){return t.apply(this,arguments)}var t=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pool.getConnection();case 3:return t=e.sent,e.next=6,t.query(this.sql,[this.data.token]);case 6:if(n=e.sent,!(n.changedRows>0)){e.next=12;break}t.connection.release(),this.res.status(200).json({success:!0}),e.next=14;break;case 12:throw t.connection.release(),new Error("User Does Not Exist");case 14:e.next=20;break;case 16:e.prev=16,e.t0=e.catch(0),console.log(e.t0),this.next(e.t0);case 20:case"end":return e.stop()}},e,this,[[0,16]])}));return e}()},{key:"register",value:function(){function e(){return t.apply(this,arguments)}var t=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t,n,r,s,a,o,i,c,u,l,h,p;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=this.data,n=t.email,r=t.password,s=t.first_name,a=t.last_name,o=t.phone,i={email:n,password:r,first_name:s,last_name:a,phone:o},c=randomstring.generate({length:20,charset:"hex"}),i.token=c,e.next=7,pool.getConnection();case 7:return u=e.sent,e.next=10,u.query(this.sql,[this.data.email]);case 10:if(l=e.sent,!(l.length>0)){e.next=16;break}throw u.connection.release(),new Error("Exists");case 16:return console.log("INSERT"),e.next=19,this.hashPassword(this.data.password);case 19:return h=e.sent,i.password=h,e.next=23,u.query(this.secondSQL,i);case 23:p=e.sent,console.log("insert result",p),p.affectedRows&&this.res.json({success:!0}),u.connection.release();case 27:e.next=33;break;case 29:e.prev=29,e.t0=e.catch(0),console.log(e.t0),this.next(e.t0);case 33:case"end":return e.stop()}},e,this,[[0,29]])}));return e}()},{key:"getUserFromToken",value:function(){function e(){return t.apply(this,arguments)}var t=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t,n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,t=jwt.verify(this.token,secret),!t.user_id){e.next=13;break}return e.next=5,pool.getConnection();case 5:return n=e.sent,e.next=8,n.query(this.sql,[t.user_id]);case 8:r=e.sent,n.connection.release(),this.res.status(200).json({user_id:r[0].user_id,email:r[0].email,first_name:r[0].first_name,last_name:r[0].last_name,phone:r[0].phone}),e.next=15;break;case 13:connection.connection.release(),this.res.status(401).json({error:"Invalid Token"});case 15:e.next=21;break;case 17:e.prev=17,e.t0=e.catch(0),console.log(e.t0),this.next(e.t0);case 21:case"end":return e.stop()}},e,this,[[0,17]])}));return e}()},{key:"login",value:function(){function e(){return t.apply(this,arguments)}var t=_asyncToGenerator(regeneratorRuntime.mark(function e(){var t,n,r,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pool.getConnection();case 3:return t=e.sent,e.next=6,t.query(this.sql,[this.data.email]);case 6:if(n=e.sent,!(n.length>0)){e.next=22;break}return r=n[0].user_id,e.next=11,this.comparePassword(this.data.password,n[0].password);case 11:if(s=e.sent,!s){e.next=18;break}a=jwt.sign({user_id:r},secret,{expiresIn:"6h"}),t.connection.release(),this.res.status(200).json({user_id:n[0].user_id,email:n[0].email,first_name:n[0].first_name,last_name:n[0].last_name,phone:n[0].phone,token:a}),e.next=20;break;case 18:throw t.connection.release(),new Error("Incorrect Password");case 20:e.next=24;break;case 22:throw t.connection.release(),new Error("User Does Not Exist");case 24:e.next=30;break;case 26:e.prev=26,e.t0=e.catch(0),console.log(e.t0),this.next(e.t0);case 30:case"end":return e.stop()}},e,this,[[0,26]])}));return e}()}]),e}();exports.default=AuthModel;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsL2F1dGhNb2RlbC5qcyJdLCJuYW1lcyI6WyJfZW1haWwiLCJyZXF1aXJlIiwiYmNyeXB0IiwicG9vbCIsInNhbHRSb3VuZHMiLCJyYW5kb21zdHJpbmciLCJqd3QiLCJzZWNyZXQiLCJBdXRoTW9kZWwiLCJ0b2tlbiIsImRhdGEiLCJyZXMiLCJuZXh0Iiwic3FsIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic2Vjb25kU1FMIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJzYWx0IiwiaGFzaCIsInBhc3N3b3JkIiwiZGJQYXNzd29yZCIsImNvbXBhcmUiLCJjb21wYXJpc29uVmFsdWUiLCJnZXRDb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsInF1ZXJ5IiwiZW1haWwiLCJyZXN1bHQiLCJjaGFuZ2VkUm93cyIsInJlbGVhc2UiLCJ1cmwiLCJlbWFpbENvbnRlbnQiLCJQcm9taXNlIiwiZW1haWxSZXNwb25zZSIsInN1Y2Nlc3MiLCJFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJfY29udGV4dCIsInQwIiwiaWRlbnRpZmllciIsImhhc2hQYXNzd29yZCIsInNlY29uZFJlc3VsdCIsImpzb24iLCJjaGFyc2V0Iiwic3RhdHVzIiwiX2NvbnRleHQyIiwiX2NvbnRleHQzIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsInBob25lIiwidXNlciIsInJlZ2lzdGVyVG9rZW4iLCJnZW5lcmF0ZSIsImVtYWlsQ2hlY2tSZXN1bHQiLCJpbnNlcnRSZXN1bHQiLCJhZmZlY3RlZFJvd3MiLCJfY29udGV4dDQiLCJkZWNvZGVkIiwidmVyaWZ5IiwidXNlcl9pZCIsIl9jb250ZXh0NSIsImNvbXBhcmVQYXNzd29yZCIsIm1hdGNoIiwic2lnbiIsImV4cGlyZXNJbiIsIl9jb250ZXh0NiJdLCJtYXBwaW5ncyI6Inl5QkFJQUEsT0FBQUMsUUFBQSw0REFKSUMsT0FBU0QsUUFBUSxVQUNqQkUsS0FBT0YsUUFBUSxvQkFDYkcsV0FBYSxHQUNiQyxhQUFlSixRQUFRLGdCQUV6QkssSUFBTUwsUUFBUSxnQkFDZE0sT0FBU04sUUFBUSxtQkFGckJPLHFCQU1FLFFBQUFBLEdBQVlDLEVBQU9DLEVBQU1DLEVBQUtDLEdBQWdDLEdBQTFCQyxHQUEwQkMsVUFBQUMsT0FBQSxHQUFBQyxTQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBcEIsR0FBSUcsRUFBZ0JILFVBQUFDLE9BQUEsR0FBQUMsU0FBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUosRUFBSUksaUJBQUFDLEtBQUFYLEdBQzVEVyxLQUFLVixNQUFRQSxFQUNiVSxLQUFLTixJQUFNQSxFQUNYTSxLQUFLVCxLQUFPQSxFQUNaUyxLQUFLUixJQUFNQSxFQUNYUSxLQUFLUCxLQUFPQSxFQUNaTyxLQUFLRixVQUFZQSw0REFmVmhCLEdBQ0xHLE1BQUFBLElBQUFBLFNBQU4sU0FBQWdCLEVBQUFDLEdBQ01oQixPQUFBQSxRQUFlSixXQUFRLFNBQUFxQixFQUFBQyxHQW1CakJELEdBakJGckIsRUFBQUEsR0FvQkZDLE9BQU9zQixLQUFLQyxFQUFVRixFQUFNLFNBQUNELEVBQUtFLEdBQzVCRixHQWhCWkQsRUFBQUMsR0FBOENMLEVBQWdCTyxpREFHaERkLEVBQVpnQixHQUNBLE1BQUtmLElBQU1BLFNBQVgsU0FBQVMsRUFBQUMsR0FDQW5CLE9BQUF5QixRQUFBRixFQUFBQyxFQUFBLFNBQUFKLEVBQUFNLEdBQ0tYLEdBQ05JLEVBQUFDLEdBd0JLRixFQUFRUSx3UkFqQlB6QixLQUFBMEIsNkJBQUFDLFVBQ0Q1QixFQUFPc0IsYUFBZUQsVUFDcEJSLE9BQUlPLEdBQ0ZELFFBQUFBLGlCQUVGUyxFQUFBQyxNQUFBWixLQUFBTixLQUFBSixFQUFBVSxLQUFBVCxLQUFBc0Isa0JBQUFaLFdBQ0RhLEVBTERDLFlBQUEsMEJBTURKLEdBVkRBLFdBQUFLLFVBREZDLEVBQUEsbUJBYURDLEVBQUEsNEtBMEIyQkQsRUFBTSwyQkFBNkIzQixFQUFRLG1FQXZCckV1QixFQUFXTSxHQUFBQSxTQUFBQSxRQUFRbkIsS0FBQ0MsS0FBQUEsTUFBU0MsZ0NBQVcscUJBQUFnQixFQUFBbEIsS0FBQVIsZUFDYmUsRUFBQUEseUJBQXpCeEIsU0FDRXFDLEdBQ0VsQixLQUFBQSxJQUFPQyxNQUFQa0IsUUFBQSxxREFHSFYsR0FMREEsV0FBQUssVUFERixHQUFBTSxPQUFBLGlGQW1DRUMsUUFBUUMsSUFBUkMsRUFBQUMsSUFDQTFCLEtBQUtQLEtBQUxnQyxFQUFBQyx3TkFJaUJDLHVIQUVFM0IsS0FBSzRCLGFBQWE1QixLQUFLVCxLQUFLZSx1QkFBekNELG1CQUNtQnJCLEtBQUswQiw2QkFBeEJDLG1CQUNlQSxFQUFXQyxNQUFNWixLQUFLTixLQUFNVyxFQUFNc0IsY0FBakRiLFdBQ0ZBLEVBQU9DLFlBQWMsdUJBRUcsZ0JBQWZZLHFDQUNrQmhCLEVBQVdDLE1BQU1aLEtBQUtGLFdBQVk2QixlQUF2REUsV0FwQ0psQixFQXFDZUksWUFBYyxvQkFwQzdCekIsRUFxQ1dxQixXQXJDSHpCLFVBQ1pVLEtBQUFBLElBQUFBLE9BRGtDLEtBQUFrQyxNQUVsQ0MsU0FBQUEsaUNBd0NJcEIsR0F0Q2VBLFdBQUFBLFVBdUNULEdBQUlXLE9BQU0sdURBR2xCWCxFQUFXQSxXQUFXSyxVQUN0QmhCLEtBQUtSLElBQUl3QyxPQTFDVGxCLEtBQU9DLE1BMkNMTSxTQUFTLHlDQTFDYlYsR0FBQUEsV0FBV0EsVUFDTE0sR0FBQUEsT0FBTSxpRkFpRGRNLFFBQVFDLElBQVJTLEVBQUFQLElBQ0ExQixLQUFLUCxLQUFMd0MsRUFBQVAsc1VBMUNhSSxLQUFNVCw2QkFBZlYsbUJBQ0RBLEVBQUFDLE1BQUFaLEtBQUFOLEtBQUFNLEtBQUFULEtBQUFELGtCQUFBd0IsV0FpRENBLEVBQU9DLFlBQWMsb0JBRXZCSixFQUFXQSxXQUFXSyxVQUN0QmhCLEtBQUtSLElBQUl3QyxPQUFPLEtBQUtGLE1BbERyQm5CLFNBQUFBLGlDQXVEQUEsR0FBV0EsV0FBV0ssVUFDaEIsR0FBSU0sT0FBTSxpRkFHbEJDLFFBQVFDLElBQVJVLEVBQUFSLElBQ0ExQixLQUFLUCxLQUFMeUMsRUFBQVIsZ1ZBTXNEMUIsS0FBS1QsS0FBdERzQixJQUFBQSxNQUFPUCxJQUFBQSxTQUFVNkIsSUFBQUEsV0FBWUMsSUFBQUEsVUFBV0MsSUFBQUEsTUFDekNDLEdBQVF6QixNQUFBQSxFQUFPUCxTQUFBQSxFQUFVNkIsV0FBQUEsRUFBWUMsVUFBQUEsRUFBV0MsTUFBQUEsR0FDOUNFLEVBQWdCckQsYUFBYXNELFVBQ2pDNUMsT0FBUSxHQUNSbUMsUUFBUyxRQUVYTyxFQUFLaEQsTUFBUWlELFdBQ1l2RCxLQUFLMEIsNkJBQXhCQyxvQkFDeUJBLEVBQVdDLE1BQU1aLEtBQUtOLEtBQU1NLEtBQUtULEtBQUtzQixtQkFBL0Q0QixXQUNGQSxFQUFpQjdDLE9BQVMseUJBQzVCZSxHQUFXQSxXQUFXSyxVQUNoQixHQUFJTSxPQUFNLHdCQUVoQkMsU0FBUUMsSUFBSSxvQkFDT3hCLEtBQUs0QixhQUFhNUIsS0FBS1QsS0FBS2Usd0JBQXpDRCxVQUNOaUMsRUFBS2hDLFNBQVdELFlBQ1dNLEVBQVdDLE1BQU1aLEtBQUtGLFVBQVd3QyxXQUF0REksU0FDTm5CLFFBQVFDLElBQUksZ0JBQWlCa0IsR0FDekJBLEVBQWFDLGNBQ2YzQyxLQUFLUixJQUFJc0MsTUFBTVQsU0FBVyxJQWE1QlYsRUFBV0EsV0FBV0ssb0VBR3hCTyxRQUFRQyxJQUFSb0IsRUFBQWxCLElBQ0ExQixLQUFLUCxLQUFMbUQsRUFBQWxCLGdVQU1NbUIsRUFBVTFELElBQUkyRCxPQUFPOUMsS0FBS1YsTUFBT0YsU0FDbkN5RCxFQUFRRSx5Q0FDZS9ELEtBQUswQiw2QkFBeEJDLG1CQTlGS2dCLEVBQVBmLE1BQXNCWixLQUFBTixLQStGdUJtRCxFQUFRRSxpQkFBbkRqQyxTQUNOSCxFQUFXQSxXQUFXSyxVQUN0QmhCLEtBQUtSLElBQUl3QyxPQUFPLEtBQUtGLE1BQ25CaUIsUUFBU2pDLEVBQU8sR0FBR2lDLFFBQ25CbEMsTUFBT0MsRUFBTyxHQUFHRCxNQUNqQnNCLFdBQVlyQixFQUFPLEdBQUdxQixXQUN0QkMsVUFBV3RCLEVBcEdnQkgsR0FBQUEsVUFxRzNCMEIsTUFBT3ZCLEVBQU8sR0FBR3VCLGdDQUduQjFCLFdBQVdBLFdBQVdLLFVBQ3RCaEIsS0FBS1IsSUFBSXdDLE9BeEdISCxLQUFBQSxNQUFhZCxNQUFBQSw0RUFDZkosUUFBQUEsSUFBQUEsRUFBQUEsSUFDQVgsS0FBQVAsS0FBQXVELEVBQUF0QixzVUFrSG1CMUMsS0FBSzBCLDZCQUF4QkMsbUJBOUdBQSxFQUFXQSxNQUFXSyxLQUF0QnRCLEtBQUFNLEtBQUFULEtBQUFzQixrQkFBQUYsV0FpSEZHLEVBQU9sQixPQUFTLDBCQUNabUQsR0FBVWpDLEVBQU8sR0FBR2lDLGtCQUNOL0MsS0FBS2lELGdCQUFnQmpELEtBQUtULEtBQUtlLFNBQVVRLEVBQU8sR0FBR1IscUJBQWpFNEMsVUFDRkEsbUJBQ0k1RCxFQUFRSCxJQUFJZ0UsTUFBTUosUUFBQUEsR0FBVTNELFFBQ2xDZ0UsVUFBVyxPQWpIWHpDLEVBQUtuQixXQUFXd0IsVUFDZEssS0FBQUEsSUFBQUEsT0FBQUEsS0FBU1MsTUFEZWlCLFFBQTFCakMsRUFBQSxHQUFBaUMsUUF1SEVsQyxNQUFPQyxFQUFPLEdBQUdELE1BQ2pCc0IsV0FBWXJCLEVBQU8sR0FBR3FCLFdBQ3RCQyxVQUFXdEIsRUFBTyxHQUFHc0IsVUFDckJDLE1BQU92QixFQUFPLEdBQUd1QixNQUNqQi9DLE1BQU9BLGlDQUdUcUIsR0FBV0EsV0F4SEdLLFVBeUhSLEdBQUlNLE9BQU0sMkRBR2xCWCxHQUFXQSxXQUFXSyxVQUNoQixHQUFJTSxPQUFNLGlGQUdsQkMsUUFBUUMsSUFBUjZCLEVBQUEzQixJQUNBMUIsS0FBS1AsS0FBTDRELEVBQUEzQixnR0FuT05yQyIsImZpbGUiOiJtb2RlbC9hdXRoTW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0Jyk7XG52YXIgcG9vbCA9IHJlcXVpcmUoJy4uL2RiL2Nvbm5lY3QuanMnKTtcbmNvbnN0IHNhbHRSb3VuZHMgPSAxMDtcbmNvbnN0IHJhbmRvbXN0cmluZyA9IHJlcXVpcmUoJ3JhbmRvbXN0cmluZycpO1xuaW1wb3J0IEVtYWlsIGZyb20gJy4uL2VtYWlsL2VtYWlsLmpzJztcbnZhciBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbnZhciBzZWNyZXQgPSByZXF1aXJlKCcuLi9qd3RTZWNyZXQuanMnKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aE1vZGVsIHtcblxuICBjb25zdHJ1Y3Rvcih0b2tlbiwgZGF0YSwgcmVzLCBuZXh0LCBzcWwgPSAnJywgc2Vjb25kU1FMID0gJycpIHtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5zcWwgPSBzcWw7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnJlcyA9IHJlcztcbiAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIHRoaXMuc2Vjb25kU1FMID0gc2Vjb25kU1FMO1xuICB9XG5cbiAgaGFzaFBhc3N3b3JkKHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+ICB7XG4gICAgICBiY3J5cHQuZ2VuU2FsdChzYWx0Um91bmRzLCAoZXJyLCBzYWx0KSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBiY3J5cHQuaGFzaChwYXNzd29yZCwgc2FsdCwgKGVyciwgaGFzaCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKGhhc2gpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pXG4gIH1cblxuICBjb21wYXJlUGFzc3dvcmQocGFzc3dvcmQsIGRiUGFzc3dvcmQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIGRiUGFzc3dvcmQsIChlcnIsIGNvbXBhcmlzb25WYWx1ZSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShjb21wYXJpc29uVmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBmb3Jnb3RQYXNzd29yZFNldHVwKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgcG9vbC5nZXRDb25uZWN0aW9uKCk7XG4gICAgICBjb25zdCB0b2tlbiA9IHJhbmRvbXN0cmluZy5nZW5lcmF0ZSh7XG4gICAgICAgIGxlbmd0aDogMjAsXG4gICAgICAgIGNoYXJzZXQ6ICdoZXgnXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24ucXVlcnkodGhpcy5zcWwsIFt0b2tlbiwgdGhpcy5kYXRhLmVtYWlsXSk7XG4gICAgICBpZiAocmVzdWx0LmNoYW5nZWRSb3dzID4gMCkge1xuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3Rpb24ucmVsZWFzZSgpO1xuICAgICAgICBjb25zdCB1cmwgPSAnd3d3LnRlc3RzaXRlLmNvbSc7XG4gICAgICAgIHZhciBlbWFpbENvbnRlbnQgPSAnWW91IGFyZSByZWNlaXZpbmcgdGhpcyBiZWNhdXNlIHlvdSBoYXZlIHJlcXVlc3RlZCB0byByZXNldCB5b3VyIHBhc3N3b3JkLiAnICtcbiAgICAgICAgJ1BsZWFzZSBjbGljayBvbiB0aGUgZm9sbG93aW5nIGxpbmssIG9yIHBhc3RlIHRoaXMgaW50byB5b3VyIGJyb3dzZXIgdG8gY29tcGxldGUnICtcbiAgICAgICAgICd0aGUgcHJvY2VzczpcXG5cXG4nICsgdXJsICsgJy9yZXNldEZvcmdvdHRlblBhc3N3b3JkLycgKyB0b2tlbiArICdcXG5cXG4gQWZ0ZXIgY29uZmlybWluZyB5b3VyIHBhc3N3b3JkJyArXG4gICAgICAgICAnIHlvdSB3aWxsIGJlIGFibGUgdG8gbG9naW4uXFxuJztcbiAgICAgICAgdmFyIGVtYWlsID0gbmV3IEVtYWlsKHRoaXMuZGF0YS5lbWFpbCwgJ2ZvcmdvdHRlbi1wYXNzd29yZEBtYWtldXAuY29tJywgJ0ZvcmdvdHRlbiBQYXNzd29yZCcsIGVtYWlsQ29udGVudCwgdGhpcy5yZXMpO1xuICAgICAgICBjb25zdCBlbWFpbFJlc3BvbnNlID0gYXdhaXQgZW1haWwuc2VuZFRva2VuRW1haWwoKTtcbiAgICAgICAgaWYgKGVtYWlsUmVzcG9uc2UpIHtcbiAgICAgICAgICB0aGlzLnJlcy5qc29uKHtzdWNjZXNzOiAnRW1haWwgaGFzIGJlZW4gc2VudCd9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIERvZXMgTm90IEV4aXN0Jyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB0aGlzLm5leHQoZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY2hhbmdlUGFzc3dvcmQoaWRlbnRpZmllcikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBoYXNoID0gYXdhaXQgdGhpcy5oYXNoUGFzc3dvcmQodGhpcy5kYXRhLnBhc3N3b3JkKTtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCBwb29sLmdldENvbm5lY3Rpb24oKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24ucXVlcnkodGhpcy5zcWwsIFtoYXNoLCBpZGVudGlmaWVyXSk7XG4gICAgICBpZiAocmVzdWx0LmNoYW5nZWRSb3dzID4gMCkge1xuICAgICAgICAvLyBpZiB0aGUgaWRlbnRpZmllciB3YXMgdGhlIHRva2VuIC0gZG8gYW5vdGhlciBxdWVyeSB3aGljaCByZW1vdmVzIHRoZSB0b2tlblxuICAgICAgICBpZiAodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3Qgc2Vjb25kUmVzdWx0ID0gYXdhaXQgY29ubmVjdGlvbi5xdWVyeSh0aGlzLnNlY29uZFNRTCwgW2lkZW50aWZpZXJdKTtcbiAgICAgICAgICBpZiAoc2Vjb25kUmVzdWx0LmNoYW5nZWRSb3dzID4gMCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHRoaXMucmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBEb2VzIE5vdCBFeGlzdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGNoYW5nZSBwYXNzd29yZCAtIHNlbmQgc3VjY2Vzc1xuICAgICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgICAgICAgdGhpcy5yZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBEb2VzIE5vdCBFeGlzdCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgdGhpcy5uZXh0KGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbmZpcm1Vc2VyKCkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgY29ubmVjdGlvbiA9IGF3YWl0IHBvb2wuZ2V0Q29ubmVjdGlvbigpO1xuICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24ucXVlcnkodGhpcy5zcWwsIFt0aGlzLmRhdGEudG9rZW5dKTtcbiAgICAgIGlmIChyZXN1bHQuY2hhbmdlZFJvd3MgPiAwKSB7XG4gICAgICAgIC8vICBob3cgdGhlIG15c3FsIGxpYnJhcnkgaXMgd3JhcHBlZCAtIHN0YWNrb3ZlcmZsb3dcbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgICAgdGhpcy5yZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICBob3cgdGhlIG15c3FsIGxpYnJhcnkgaXMgd3JhcHBlZCAtIHN0YWNrb3ZlcmZsb3dcbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIERvZXMgTm90IEV4aXN0Jyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB0aGlzLm5leHQoZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVnaXN0ZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciB7ZW1haWwsIHBhc3N3b3JkLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIHBob25lfSA9IHRoaXMuZGF0YTtcbiAgICAgIHZhciB1c2VyID0ge2VtYWlsLCBwYXNzd29yZCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBwaG9uZX07XG4gICAgICBjb25zdCByZWdpc3RlclRva2VuID0gcmFuZG9tc3RyaW5nLmdlbmVyYXRlKHtcbiAgICAgICAgbGVuZ3RoOiAyMCxcbiAgICAgICAgY2hhcnNldDogJ2hleCdcbiAgICAgIH0pO1xuICAgICAgdXNlci50b2tlbiA9IHJlZ2lzdGVyVG9rZW47XG4gICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgcG9vbC5nZXRDb25uZWN0aW9uKCk7XG4gICAgICBjb25zdCBlbWFpbENoZWNrUmVzdWx0ID0gYXdhaXQgY29ubmVjdGlvbi5xdWVyeSh0aGlzLnNxbCwgW3RoaXMuZGF0YS5lbWFpbF0pO1xuICAgICAgaWYgKGVtYWlsQ2hlY2tSZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3Rpb24ucmVsZWFzZSgpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4aXN0cycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0lOU0VSVCcpO1xuICAgICAgICBjb25zdCBoYXNoID0gYXdhaXQgdGhpcy5oYXNoUGFzc3dvcmQodGhpcy5kYXRhLnBhc3N3b3JkKTtcbiAgICAgICAgdXNlci5wYXNzd29yZCA9IGhhc2g7XG4gICAgICAgIGNvbnN0IGluc2VydFJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24ucXVlcnkodGhpcy5zZWNvbmRTUUwsIHVzZXIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImluc2VydCByZXN1bHRcIiwgaW5zZXJ0UmVzdWx0KTtcbiAgICAgICAgaWYgKGluc2VydFJlc3VsdC5hZmZlY3RlZFJvd3MpIHtcbiAgICAgICAgICB0aGlzLnJlcy5qc29uKHtcInN1Y2Nlc3NcIjogdHJ1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFyIHVybCA9ICd3d3cudGVzdHNpdGUuY29tJztcbiAgICAgICAgLy8gdmFyIHJlZ2lzdGVyRW1haWxDb250ZW50ID0gJ1lvdSBhcmUgcmVjZWl2aW5nIHRoaXMgYmVjYXVzZSB5b3UgKG9yIHNvbWVvbmUgZWxzZSkgaGF2ZSBzaWduZWQgdXAgJyArXG4gICAgICAgIC8vICd0byB0aGUgd2Vic2l0ZS5cXG5cXG4gUGxlYXNlIGNsaWNrIG9uIHRoZSBmb2xsb3dpbmcgbGluaywgb3IgcGFzdGUgdGhpcyBpbnRvIHlvdXIgYnJvd3NlciB0byBjb21wbGV0ZScgK1xuICAgICAgICAvLyAgJ3RoZSBwcm9jZXNzOlxcblxcbicgKyB1cmwgKyAnL2NvbmZpcm1FbWFpbC8nICsgdXNlci50b2tlbiArICdcXG5cXG4gT25jZSB5b3UgaGF2ZSBjb25maXJtZWQgeW91ciBhY2NvdW50LCcgK1xuICAgICAgICAvLyAgJyB5b3Ugd2lsbCBiZSBhYmxlIHRvIGxvZ2luLlxcbic7XG4gICAgICAgIC8vIHZhciBFbWFpbCA9IG5ldyBFbWFpbCh0aGlzLmRhdGEuZW1haWwsICd1c2VyY29uZmlybWF0aW9uQG1ha2V1cC5jb20nLCAnQ29uZmlybSBBY2NvdW50JywgcmVnaXN0ZXJFbWFpbENvbnRlbnQsIHRoaXMucmVzKTtcbiAgICAgIC8vICAgY29uc3QgZW1haWxSZXNwb25zZSA9IGF3YWl0IEVtYWlsLnNlbmRUb2tlbkVtYWlsKCk7XG4gICAgICAgIC8vIGlmIChlbWFpbFJlc3BvbnNlKSB7XG4gICAgICAgIC8vICAgdGhpcy5yZXMuanNvbih7c3VjY2VzczogJ0VtYWlsIGhhcyBiZWVuIHNlbnQnfSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIHRoaXMubmV4dChlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRVc2VyRnJvbVRva2VuKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkZWNvZGVkID0gand0LnZlcmlmeSh0aGlzLnRva2VuLCBzZWNyZXQpO1xuICAgICAgaWYgKGRlY29kZWQudXNlcl9pZCkge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgcG9vbC5nZXRDb25uZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24ucXVlcnkodGhpcy5zcWwsIFtkZWNvZGVkLnVzZXJfaWRdKTtcbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgICAgdGhpcy5yZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgICAgdXNlcl9pZDogcmVzdWx0WzBdLnVzZXJfaWQsXG4gICAgICAgICAgZW1haWw6IHJlc3VsdFswXS5lbWFpbCxcbiAgICAgICAgICBmaXJzdF9uYW1lOiByZXN1bHRbMF0uZmlyc3RfbmFtZSxcbiAgICAgICAgICBsYXN0X25hbWU6IHJlc3VsdFswXS5sYXN0X25hbWUsXG4gICAgICAgICAgcGhvbmU6IHJlc3VsdFswXS5waG9uZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMucmVzLnN0YXR1cyg0MDEpLmpzb24oe1wiZXJyb3JcIjogXCJJbnZhbGlkIFRva2VuXCJ9KTtcbiAgICAgIH1cblxuXG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIHRoaXMubmV4dChlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsb2dpbigpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IHBvb2wuZ2V0Q29ubmVjdGlvbigpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29ubmVjdGlvbi5xdWVyeSh0aGlzLnNxbCwgW3RoaXMuZGF0YS5lbWFpbF0pO1xuXG4gICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgdXNlcl9pZCA9IHJlc3VsdFswXS51c2VyX2lkO1xuICAgICAgICBjb25zdCBtYXRjaCA9IGF3YWl0IHRoaXMuY29tcGFyZVBhc3N3b3JkKHRoaXMuZGF0YS5wYXNzd29yZCwgcmVzdWx0WzBdLnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgY29uc3QgdG9rZW4gPSBqd3Quc2lnbih7dXNlcl9pZH0sIHNlY3JldCwge1xuICAgICAgICAgIGV4cGlyZXNJbjogJzZoJ1xuICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgICAgICAgdGhpcy5yZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgICAgICB1c2VyX2lkOiByZXN1bHRbMF0udXNlcl9pZCxcbiAgICAgICAgICAgIGVtYWlsOiByZXN1bHRbMF0uZW1haWwsXG4gICAgICAgICAgICBmaXJzdF9uYW1lOiByZXN1bHRbMF0uZmlyc3RfbmFtZSxcbiAgICAgICAgICAgIGxhc3RfbmFtZTogcmVzdWx0WzBdLmxhc3RfbmFtZSxcbiAgICAgICAgICAgIHBob25lOiByZXN1bHRbMF0ucGhvbmUsXG4gICAgICAgICAgICB0b2tlbjogdG9rZW5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3Rpb24ucmVsZWFzZSgpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IFBhc3N3b3JkJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBEb2VzIE5vdCBFeGlzdCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgdGhpcy5uZXh0KGUpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=
