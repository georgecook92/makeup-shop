"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _asyncToGenerator(e){return function(){var n=e.apply(this,arguments);return new Promise(function(e,t){function o(r,s){try{var a=n[r](s),c=a.value}catch(e){return void t(e)}return a.done?void e(c):Promise.resolve(c).then(function(e){o("next",e)},function(e){o("throw",e)})}return o("next")})}}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(n,t,o){return t&&e(n.prototype,t),o&&e(n,o),n}}(),_email=require("../email/email.js"),_email2=_interopRequireDefault(_email),bcrypt=require("bcrypt"),pool=require("../db/connect.js"),saltRounds=10,randomstring=require("randomstring"),AuthModel=function(){function e(n,t,o){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";_classCallCheck(this,e),this.sql=r,this.data=n,this.res=t,this.next=o,this.secondSQL=s}return _createClass(e,[{key:"forgotPasswordSetup",value:function(){var e=this;pool.getConnection().then(function(n){var t=randomstring.generate({length:20,charset:"hex"});return n.query(e.sql,[t,e.data.email]).then(function(o){if(!(o.changedRows>0))throw n.connection.release(),new Error("User Does Not Exist");n.connection.release();var r="www.testsite.com",s="You are receiving this because you have requested to reset your password. Please click on the following link, or paste this into your browser to completethe process:\n\n"+r+"/resetForgottenPassword/"+t+"\n\n After confirming your password you will be able to login.\n",a=new _email2.default(e.data.email,"forgotten-password@makeup.com","Forgotten Password",s,e.res);a.sendTokenEmail()}).catch(function(n){n&&(console.log(n),e.next(n))})})}},{key:"changePassword",value:function(e){var n=this;pool.getConnection().then(function(t){try{bcrypt.genSalt(saltRounds,function(o,r){if(o)throw new Error(o);bcrypt.hash(n.data.password,r,function(o,r){if(o)throw new Error(o);return n.data.password=r,t.query(n.sql,[n.data.password,e]).then(function(o){if(console.log(o),!(o.changedRows>0))throw t.connection.release(),new Error("User Does Not Exist");"string"==typeof e&&t.query(n.secondSQL,[e]).then(function(e){if(!(e.changedRows>0))throw t.connection.release(),new Error("User Does Not Exist");t.connection.release(),n.res.status(200).json({success:!0})}).catch(function(e){throw t.connection.release(),new Error("User Does Not Exist")}),t.connection.release(),n.res.status(200).json({success:!0})}).catch(function(e){console.log(e),n.next(e)})})})}catch(e){console.log(e),n.next(e)}}).catch(function(e){console.log(e),n.next(e)})}},{key:"confirmUser",value:function(){function e(){return n.apply(this,arguments)}var n=_asyncToGenerator(regeneratorRuntime.mark(function e(){var n,t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pool.getConnection();case 3:return n=e.sent,e.next=6,n.query(this.sql,[this.data.token]);case 6:if(t=e.sent,console.log(t.changedRows),!(t.changedRows>0)){e.next=13;break}n.connection.release(),this.res.status(200).json({success:!0}),e.next=15;break;case 13:throw n.connection.release(),new Error("User Does Not Exist");case 15:e.next=21;break;case 17:e.prev=17,e.t0=e.catch(0),console.log(e.t0),this.next(e.t0);case 21:case"end":return e.stop()}},e,this,[[0,17]])}));return e}()},{key:"register",value:function(){var e=this,n=this.data,t=n.email,o=n.password,r=n.first_name,s=n.last_name,a=n.phone,c={email:t,password:o,first_name:r,last_name:s,phone:a},i=randomstring.generate({length:20,charset:"hex"});c.token=i;try{if(!(t&&o&&r&&s&&a))throw console.log("error - not all fields"),new Error("Provide All Fields");pool.getConnection().then(function(n){return n.query(e.sql,[e.data.email]).then(function(t){if(t.length>0)throw n.connection.release(),new Error("Exists");try{bcrypt.genSalt(saltRounds,function(t,o){if(t)throw n.connection.release(),new Error(t);bcrypt.hash(e.data.password,o,function(t,o){if(t)throw n.connection.release(),new Error(t);return c.password=o,pool.getConnection().then(function(n){return n.query("INSERT INTO _users SET ?",c).then(function(t){var o="www.testsite.com",r="You are receiving this because you (or someone else) have signed up to the website.\n\n Please click on the following link, or paste this into your browser to completethe process:\n\n"+o+"/confirmEmail/"+c.token+"\n\n Once you have confirmed your account, you will be able to login.\n",s=new _email2.default(e.data.email,"userconfirmation@makeup.com","Confirm Account",r,e.res);s.sendTokenEmail(),n.connection.release()})})})})}catch(n){console.log(n),e.next(n)}})}).catch(function(n){console.log(n),e.next(n)})}catch(e){console.log(e),this.next(e)}}},{key:"login",value:function(){var e=this;pool.getConnection().then(function(n){return n.query(e.sql,[e.data.email]).then(function(t){t.length>0&&bcrypt.compare(e.data.password,t[0].password,function(o,r){try{if(o)throw n.connection.release(),console.log(o),new Error(o);if(!r)throw n.connection.release(),new Error("Incorrect Password");n.connection.release(),console.log(t[0]),e.res.status(200).json({user_id:t[0].user_id,email:t[0].email,first_name:t[0].first_name,last_name:t[0].last_name,phone:t[0].phone})}catch(n){console.log(n),e.next(n)}})}).catch(function(n){console.log(n),e.next(n)})})}}]),e}();exports.default=AuthModel;
//# sourceMappingURL=data:application/json;base64,
